---
- name: Setup iTerm2 (macOS)
  when: ansible_os_family == "Darwin"
  block:
    - name: Install iTerm2
      community.general.homebrew_cask:
        name: iterm2
        state: present

# --- Default shell to zsh (Linux) ---
- name: Ensure zsh is installed and set as default shell (Linux)
  when: ansible_os_family in ["Debian", "Alpine"]
  become: true
  block:
    - name: Ensure zsh is installed
      ansible.builtin.package:
        name: zsh
        state: present

    - name: Find zsh binary (no shell)
      ansible.builtin.command: which zsh
      register: ohmyzsh_zsh_path
      changed_when: false
      failed_when: ohmyzsh_zsh_path.rc != 0

    - name: Ensure zsh path is listed in /etc/shells (Linux)
      ansible.builtin.lineinfile:
        path: /etc/shells
        line: "{{ ohmyzsh_zsh_path.stdout | trim }}"
        state: present

    - name: Get current login shell from /etc/passwd
      ansible.builtin.command: getent passwd {{ ansible_user_id }}
      register: user_info
      changed_when: false

    - name: Change default shell to zsh if not already
      ansible.builtin.user:
        name: "{{ ansible_user_id }}"
        shell: "{{ ohmyzsh_zsh_path.stdout | trim }}"
      when: user_info.stdout.split(':')[-1] | trim != (ohmyzsh_zsh_path.stdout | trim)

# --- Default shell to zsh (macOS) ---
- name: Ensure zsh is default shell (macOS)
  when: ansible_os_family == "Darwin"
  block:
    - name: Find zsh binary (macOS)
      ansible.builtin.command: which zsh
      register: ohmyzsh_darwin_zsh
      changed_when: false
      failed_when: ohmyzsh_darwin_zsh.rc != 0

    - name: Ensure zsh path is listed in /etc/shells (macOS)
      become: true
      ansible.builtin.lineinfile:
        path: /etc/shells
        line: "{{ ohmyzsh_darwin_zsh.stdout | trim }}"
        state: present

    - name: Get current login shell (macOS)
      ansible.builtin.command: dscl . -read /Users/{{ ansible_user_id }} UserShell
      register: ohmyzsh_darwin_shell
      changed_when: false

    - name: Change default shell to zsh if not already (macOS)
      become: true
      ansible.builtin.command: chsh -s "{{ ohmyzsh_darwin_zsh.stdout | trim }}" "{{ ansible_user_id }}"
      when: ohmyzsh_darwin_shell.stdout is not search(ohmyzsh_darwin_zsh.stdout | trim)

# --- Oh My Zsh detection ---
- name: Check if Oh My Zsh is installed
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.oh-my-zsh"
  register: ohmyzsh_installed
  changed_when: false
  failed_when: false
- name: Set presence flag for Oh My Zsh
  ansible.builtin.set_fact:
    ohmyzsh_present: "{{ (ohmyzsh_installed.stat.exists | default(false)) | bool }}"

# --- Oh My Zsh install (macOS) ---
- name: Setup Oh My Zsh (macOS)
  when:
    - ansible_os_family == "Darwin"
    - not ohmyzsh_present
  block:
    - name: Download Oh My Zsh installer
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh
        dest: /tmp/install_ohmyzsh.sh
        mode: "0755"

    - name: Run Oh My Zsh installer (unattended)
      ansible.builtin.command: /tmp/install_ohmyzsh.sh --unattended
      register: ohmyzsh_result
      changed_when: ohmyzsh_result.rc == 0
      failed_when: ohmyzsh_result.rc != 0

    - name: Ensure ZSH env var is set in .zshrc
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        regexp: '^export ZSH='
        line: 'export ZSH="$HOME/.oh-my-zsh"'
        state: present
        create: true
        mode: "0644"

    - name: Re-check if Oh My Zsh is installed (refresh var)
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.oh-my-zsh"
      register: ohmyzsh_installed

# --- Theme / fonts ---
- name: Installing ZSH Theme (Powerlevel10k)
  when:
    - (ohmyzsh_present and ansible_os_family in ["Darwin", "Alpine", "Debian"])
  block:
    - name: Install Powerlevel10k (Darwin via Homebrew)
      when: ansible_os_family == "Darwin"
      community.general.homebrew:
        name: powerlevel10k
        state: present

    - name: Install Powerlevel10k (Debian/Alpine via git)
      when: ansible_os_family in ["Alpine", "Debian"]
      ansible.builtin.git:  # noqa latest[git]
        repo: https://github.com/romkatv/powerlevel10k.git
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/themes/powerlevel10k"
        depth: 1
        update: false
        version: HEAD

    - name: Add Powerlevel10k theme source to .zshrc on Darwin
      when: ansible_os_family == "Darwin"
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        insertafter: '^source \$ZSH/oh-my-zsh\.sh$'
        line: 'source $(brew --prefix)/share/powerlevel10k/powerlevel10k.zsh-theme'
        state: present

    - name: Ensure Powerlevel10k is the active theme
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        regexp: '^ZSH_THEME='
        line: 'ZSH_THEME="powerlevel10k/powerlevel10k"'
        state: present

    - name: Configure powerlevel10k in .zshrc (container override)
      when: ansible_env.container is defined
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        insertafter: '^ZSH_THEME='
        line: "[[ ! -f ~/.dotfiles/zshrc/themes/{{ item }} ]] || source ~/.dotfiles/zshrc/themes/{{ item }}"
        state: present
      loop:
        - dev.p10k.zsh

- name: Install Powerlevel10k fonts
  when:
    - ansible_env.HOME is defined
    - ansible_env.HOME != ''
  ansible.builtin.import_tasks: powerfont.yml
  tags: [fonts, powerlevel10k]

# --- History tuning ---
- name: Set zsh history configuration
  when:
    - ansible_os_family in ["Darwin", "Linux"]
    - ohmyzsh_present
  ansible.builtin.import_tasks: hist.yml

# --- Plugins (common) ---
- name: Deploy ZSH plugins
  ansible.builtin.import_tasks: plugins.yml
  when: ohmyzsh_present
