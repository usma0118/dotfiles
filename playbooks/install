#!/bin/bash
set -e
set -u

# shellcheck disable=SC1091
source "$DOTFILES_DIR/lib/log.sh"
# shellcheck disable=SC1091
source "$DOTFILES_DIR/lib/utils.sh"
declare -r DOTFILES_DIR="${DOTFILES_DIR:-}"
declare -r os_family_override="${OS_FAMILY_OVERRIDE:-}"
declare -r playbook_file="${os_family_override:-${os_family}}.yml"
declare -r REMOTE_USER="${REMOTE_USER:-}"
declare -r VIRTUAL_ENV="${VIRTUAL_ENV:-}"
if [ -n "${VIRTUAL_ENV:-}" ]; then
  log_warning 'Ansible in venv: %s\n' "$VIRTUAL_ENV"
elif [ -f "$HOME/.venv/bin/activate" ]; then
  # shellcheck disable=SC1090
  . "$HOME/.venv/bin/activate"
  printf 'info: activated venv at %s/.venv\n' "$HOME"
fi
export ANSIBLE_PYTHON_INTERPRETER="$VIRTUAL_ENV/bin/python"

if [[ -n "$os_family_override" ]]; then
  log_info "Using OS family: $os_family with override"
  ansible-playbook -K "$playbook_file" -b "$@"
elif ! tty -s; then
  log_warning "Script is running in unattended mode."
  export ANSIBLE_STDOUT_CALLBACK=minimal
  export ANSIBLE_NO_WARNINGS=True
  ansible-playbook "$playbook_file" -u "${SUDO_USER:-$USER}" -b "$@"
else
  log_info "Script is running in attended mode."
  ansible-playbook "$playbook_file" -u "$REMOTE_USER" -b -K "$@"
fi
